from aiogram.handlers import ErrorHandler
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import *
from typing import Any, Dict, Union
from loader import *
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, IS_NOT_MEMBER, MEMBER, ADMINISTRATOR
from datetime import datetime
from keyboards.reply.usermainkey import *
from keyboards.inline.userinlinekey import *
from loguru import logger
from utils.misc_func.bot_models import *
from aiogram_media_group import media_group_handler

from utils.misc_func.messagefunc import *
from typing import *
from keyboards.inline.adminkeyinline import *
from random import randint
from utils.misc_func.otherfunc import generate_capthcat
import io
from aiogram.utils.media_group import MediaGroupBuilder

from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import ExceptionMessageFilter, ExceptionTypeFilter
from aiogram.exceptions import *


@userRouter.error(ExceptionTypeFilter(TelegramBadRequest), F.update.message.as_("message"))
async def handle_my_custom_exception(event: ErrorEvent):
    # do something with error
    logger.info(event.update.message.from_user.id)
    logger.info(type(event.exception))
    logger.info(event.exception)

    async with BotDB() as db:
        settings = await db.getSettings()

    match str(event.exception):
        case 'Telegram server says - Bad Request: message thread not found':
            await bot.send_message(event.update.message.from_user.id, 
                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚è≥')
            add = await createTopicUser(bot, event.update.message, settings)
            if add:
                await bot.send_message(event.update.message.from_user.id, 
                                   '‚úÖ –ì–æ—Ç–æ–≤–æ, –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É')
            else:
                await bot.send_message(event.update.message.from_user.id, 
                                   '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')

@userRouter.error(ExceptionTypeFilter(TelegramRetryAfter))
async def TelegramRetryAfterFunc(event: ErrorEvent):
    
    logger.warning(event)

    await bot.send_message(event.update.message.from_user.id,
                           f'‚ö†Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª —Ñ–ª—É–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ <i>{event.exception.retry_after} —Å–µ–∫–Ω—É–¥</i> –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üôè')