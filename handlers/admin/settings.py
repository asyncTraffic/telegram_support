from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import *
from utils.misc_func.bot_models import *
from loader import *
from datetime import datetime
from keyboards.inline.adminkeyinline import *
from utils.bot_database import BotDB

from aiogram.methods.create_forum_topic import CreateForumTopic

from states.other_state import *
from utils.misc_func.filters import *

from keyboards.reply.adminkey import *
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, IS_NOT_MEMBER, MEMBER, ADMINISTRATOR
from loguru import logger
from aiogram.exceptions import TelegramBadRequest

@adminRouter.callback_query(F.data=='backsettings')
@adminRouter.message(F.text=='üîß –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞')
async def settingsBotFunc(upd: Union[CallbackQuery, Message], state: FSM):

    await state.clear()

    async with BotDB() as db:
        settings = await db.getSettings() 

    text = f'''
<b>üîß –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞</b>

üí≠ –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É, –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã

<i>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëáüèª</i>
'''
    key = settingsKey(settings['technical_work'], settings['workbot'], settings['captcha'])

    try:
        await upd.message.edit_text(text, reply_markup=key)
    except:
        await upd.answer(text, reply_markup=key)

@adminRouter.callback_query(F.data.startswith('sleepbot_'))
async def sleepbot_Func(call: CallbackQuery, state: FSM):

    status = int(call.data.split('_')[1])

    async with BotDB() as db:
        await db.updateStatusBot('workbot', status)
        settings = await db.getSettings() 

    key = settingsKey(settings['technical_work'], settings['workbot'], settings['captcha'])

    await call.message.edit_reply_markup(reply_markup=key)


@adminRouter.callback_query(F.data.startswith('workbot_'))
async def workbot_Func(call: CallbackQuery, state: FSM):

    status = int(call.data.split('_')[1])

    async with BotDB() as db:
        await db.updateStatusBot('technical_work', status)
        settings = await db.getSettings() 

    key = settingsKey(settings['technical_work'], settings['workbot'], settings['captcha'])

    await call.message.edit_reply_markup(reply_markup=key)


@adminRouter.callback_query(F.data.startswith('capthca_'))
async def capthca_Func(call: CallbackQuery, state: FSM):

    status = int(call.data.split('_')[1])

    async with BotDB() as db:
        await db.updateStatusBot('captcha', status)
        settings = await db.getSettings() 

    key = settingsKey(settings['technical_work'], settings['workbot'], settings['captcha'])

    await call.message.edit_reply_markup(reply_markup=key)



@adminRouter.callback_query(F.data=='succontent')
async def succontentFunc(call: CallbackQuery, state: FSM):

    await state.clear()

    async with BotDB() as db:
        content = await db.getContent()

    key = contentKeyFunc(content['voice'], content['photo'], content['video'], content['document'], content['videonote'], content['link'])

    text = f'''
<b>üì∑ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</b>

<b>‚úÖ ‚Äî —Ä–∞–∑—Ä–µ—à–µ–Ω–æ</b>
<b>üî¥ ‚Äî –∑–∞–ø—Ä–µ—â–µ–Ω–æ</b>

–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –≤–∏–¥—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ –í—ã –º–æ–∂–µ—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∑–∞–ø—Ä–µ—Ç–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏, —Ç–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
'''
    await call.message.edit_text(text, reply_markup=key)


@adminRouter.callback_query(F.data.startswith('cont_'))
async def cont_Func(call: CallbackQuery, state: FSM):

    _, type_, value_ = call.data.split('_')

    async with BotDB() as db:
        await db.updateContent(type_, int(value_))
        content = await db.getContent()

    key = contentKeyFunc(content['voice'], content['photo'], content['video'], content['document'], content['videonote'], content['link'])

    await call.message.edit_reply_markup(reply_markup=key)
