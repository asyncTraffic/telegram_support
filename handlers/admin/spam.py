from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import *
from utils.misc_func.bot_models import *
from loader import *
from datetime import datetime
from keyboards.inline.adminkeyinline import *
from keyboards.inline.otherkey import *
from utils.bot_database import BotDB

from aiogram.methods.create_forum_topic import CreateForumTopic

from states.other_state import *
from utils.misc_func.filters import *

from keyboards.reply.adminkey import *
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, IS_NOT_MEMBER, MEMBER, ADMINISTRATOR
from loguru import logger
from utils.misc_func.messagefunc import messageFunction, spamUsers
from states.admin_state import *
from utils.misc_func.otherfunc import *

@adminRouter.message(F.text=='üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
@adminRouter.callback_query(F.data == 'spam_edit')
async def spam_editFunc(upd: Union[Message, CallbackQuery], state: FSM, bot: Bot):

    await state.clear()
    try:
        await upd.message.delete()
    except:
        await upd.delete()

    async with BotDB() as db:
        settings = await db.getSettings()
    
    await messageFunction(upd, bot, settings['spam_post'], settings['spam_media'], settings['spam_keyboard'])

    await bot.send_message(upd.from_user.id, '–ß—Ç–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ', reply_markup=contentMainKey('spam'))

@adminRouter.callback_query(F.data == 'post_media_spam')
async def post_media_Func(call: CallbackQuery, state: FSM, bot: Bot):

    await state.clear()

    await state.set_state(createPostSpam.media)

    text = f'''
–°–º–µ–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞

<b>–ß—Ç–æ –±—ã —Å–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: 
1. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
2. –í–∏–¥–µ–æ
3. –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è
4. –ì–∏—Ñ–∫–∏
5. –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

<i>–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –º–µ–¥–∏–∞—Ñ–∞–π–ª—É! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∂–∞—Ç—ã–º!</i>
'''

    await call.message.edit_text(text, reply_markup=backContent('spam', 'media'))


@adminRouter.callback_query(F.data.startswith('spam_delete_'))
async def spam_delete_Func(call: CallbackQuery, state: FSM):
    await state.clear()

    type_ = call.data.split('_')[2]

    match type_:
        case 'media':
            content_type = 'media'
            text = '<b>‚å®Ô∏è –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>'

        case 'key':
            content_type = 'keyboard'
            text = '<b>‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</b>'
            
    async with BotDB() as db:
        await db.nullContent('spam', content_type)

    await call.message.edit_text(text, reply_markup=backContent('spam'))


@adminRouter.message(createPostSpam.media, F.content_type.in_({'photo', 'video', 'animation', 'video_note', 'voice'}))
async def setMediaPostspam(msg: Message, state: FSM, bot: Bot):

    if str(msg.content_type) == 'ContentType.VIDEO':
        type_ = 'VIDEO'
        document_id = msg.video.file_id

    elif str(msg.content_type) == 'ContentType.PHOTO':
        type_ = 'PHOTO'
        document_id = msg.photo[-1].file_id
    
    elif str(msg.content_type) == 'ContentType.VIDEO_NOTE':
        type_ = 'VIDEO_NOTE'
        document_id = msg.video_note.file_id

    elif str(msg.content_type) == 'ContentType.ANIMATION':
        type_ = 'ANIMATION'
        document_id = msg.animation.file_id
    
    elif str(msg.content_type) == 'ContentType.VOICE':
        type_ = 'VOICE'
        document_id = msg.voice.file_id
    
    file_info = await bot.get_file(document_id)
    file_id = file_info.file_id

    media = f'{type_}|{file_id}'

    async with BotDB() as db:
        await db.updateMedia(media, 'spam')

    await msg.answer('‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥', reply_markup=backContent('spam'))
    

@adminRouter.callback_query(F.data == 'post_keyboards_spam')
async def keyboards_Func(call: CallbackQuery, state: FSM, bot: Bot):

    await state.set_state(createPostSpam.keyboard)
    text = f'''
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏ –∞–¥—Ä–µ—Å —Å—Å—ã–ª–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: 

Telegram https://telegram.org

–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –∑–∞ —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ¬´|¬ª. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Ä—è–¥ ‚Äì —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–∞–∫: 

<i>Telegram https://telegram.org | –ù–æ–≤–æ—Å—Ç–∏ https://telegram.org/blog
FAQ https://telegram.org/spam | –°–∫–∞—á–∞—Ç—å https://telegram.org/apps</i>
'''
    await call.message.answer(text, reply_markup=backContent('spam', 'key'), disable_web_page_preview=True)


@adminRouter.message(createPostSpam.keyboard)
async def setKeyboardPostspam(msg: Message, state: FSM, bot: Bot):

    try:
        keysList = msg.text.split('\n')

        formatStatus=True

        for key in keysList:
            logger.info(key)
            keys = key.split('|')
            
            for btn in keys:
                logger.info(btn)
                if check_format_keys(btn) == False:
                    formatStatus = False
                break

            if formatStatus==False:
                break

        if formatStatus==False:
            await state.set_state(createPostSpam.keyboard)
            await msg.answer('‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –í–∞–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup=backContent('spam', 'key'))
        
        else:
            async with BotDB() as db:
                await db.updateKeyboard(msg.text, 'spam')

            await msg.answer('‚úÖ –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω—ã, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–æ—Å—Ç—É', reply_markup=backContent('spam'))

    except Exception as e:
        logger.error(e)
        await state.set_state(createPostSpam.keyboard)
        await msg.answer('‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –í–∞–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup=backContent('spam', 'key'))


@adminRouter.callback_query(F.data == 'post_text_spam')
async def text_Func(call: CallbackQuery, state: FSM, bot: Bot):
    await state.set_state(createPostSpam.text)
    await call.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', reply_markup=backContent('spam'))


@adminRouter.message(createPostSpam.text)
async def setTextPostspam(msg: Message, state: FSM, bot: Bot):

    async with BotDB() as db:
        await db.updateText(msg.html_text, 'spam')

    await msg.answer('‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–æ—Å—Ç—É', reply_markup=backContent('spam'))


@adminRouter.callback_query(F.data=='startspam')
async def startspamFunc(call: CallbackQuery, state: FSM, bot: Bot):

    await state.clear()

    async with BotDB() as db:
        settings = await db.getSettings()
        users = await db.getUsers()
    
    success = 0
    false = 0

    await call.message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞, –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –í–∞–º –ø—Ä–∏–¥–µ—Ç—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')

    for user in users:
        send = await spamUsers(user['user_id'], user['name'], bot, settings['spam_post'], settings['spam_media'], settings['spam_keyboard'])
        if send:
            success += 1

        else:
            false += 1

    textAdmin = f'''
<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞</b>

üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
üÜó –£–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {success}
‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {false}
'''
    await call.message.answer(textAdmin)